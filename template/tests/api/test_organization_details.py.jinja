import logging
from unittest.mock import MagicMock

import pytest
from fastapi import HTTPException, status
from fastapi.testclient import TestClient

from parma_mining.{{module_name}}.api.dependencies.auth import authenticate
from parma_mining.{{module_name}}.api.main import app
from parma_mining.mining_common.const import HTTP_200, HTTP_404
from tests.dependencies.mock_auth import mock_authenticate


@pytest.fixture
def client():
    assert app
    app.dependency_overrides.update(
        {
            authenticate: mock_authenticate,
        }
    )
    return TestClient(app)


logger = logging.getLogger(__name__)


@pytest.fixture
def mock_{{module_name}}_client(mocker) -> MagicMock:
    """Mocking the Client{{module_name}}'s method to avoid API calls during testing."""
    mock = mocker.patch(
        "parma_mining.{{module_name}}.api.main.Client{{module_name}}.get_organization_details"
    )
    mock.return_value = {"name": "TestOrg"}
    return mock


@pytest.fixture
def mock_analytics_client(mocker) -> MagicMock:
    """Mocking the AnalyticClient's method to avoid actual API calls during testing."""
    mock = mocker.patch(
        "parma_mining.{{module_name}}.api.main.AnalyticsClient.feed_raw_data"
    )
    mock = mocker.patch(
        "parma_mining.{{module_name}}.api.main.AnalyticsClient.crawling_finished"
    )
    # No return value needed, but you can add side effects or exceptions if necessary
    return mock


def test_get_organization_details(
        mock_{{module_name}}_client: MagicMock,
        mock_analytics_client: MagicMock,
        client: TestClient,
):
    payload = {
        "task_id": 123,
        "companies": {
            "Example_id1": {"name": ["langfuse"]},
            "Example_id2": {"name": ["personio"]},
        },
    }

    headers = {"Authorization": "Bearer test"}
    response = client.post("/companies", json=payload, headers=headers)

    mock_analytics_client.assert_called()

    assert response.status_code == HTTP_200


def test_get_organization_details_bad_request(mocker, client: TestClient):
    mocker.patch(
        "parma_mining.{{module_name}}.api.main.Client{{module_name}}.get_organization_details",
        side_effect=HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Organization not found"
        ),
    )

    payload = {
        "task_id": 123,
        "companies": {
            "Example_id1": {"name": ["langfuse"]},
            "Example_id2": {"name": ["personio"]},
        },
    }

    headers = {"Authorization": "Bearer test"}
    response = client.post("/companies", json=payload, headers=headers)
    assert response.status_code == HTTP_404
